import 'dart:io';
import 'package:email_password_login/controller/billing.dart';
import 'package:flutter/material.dart';
import 'package:open_file_plus/open_file_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:speech_to_text/speech_to_text.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:flutter/services.dart';
import 'package:avatar_glow/avatar_glow.dart';

class SpeechScreen extends StatefulWidget {
  const SpeechScreen({Key? key}) : super(key: key);

  @override
  _SpeechScreenState createState() => _SpeechScreenState();
}

class _SpeechScreenState extends State<SpeechScreen> {
  SpeechToText speechToText = SpeechToText();
  var text = "Start Taking Notes";
  var isListening = false;

  Future<void> generatePdf(String text) async {
    final pdf = pw.Document();

    // Load the Roboto font
    final fontData = ByteData.sublistView(
        await rootBundle.load('assets/font/Roboto-Regular.ttf'));
    final ttf = pw.Font.ttf(fontData.buffer.asByteData());

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.center,
            children: [
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.center,
                children: [
                  pw.Text(
                    "LazyNotes",
                    style: pw.TextStyle(
                      fontSize: 36,
                      font: ttf, // Larger font size
                      color: PdfColor.fromInt(0xFF00FF00), // Green color
                    ),
                  ),
                ],
              ),
              pw.SizedBox(height: 20), // Add spacing
              pw.Center(
                child: pw.Text(
                  text,
                  style: pw.TextStyle(
                    fontSize: 24,
                    font: ttf, // Apply the Roboto font
                  ),
                ),
              ),
              pw.SizedBox(height: 500), // Add more spacing
              pw.Text(
                "Generated by LazyNotes",
                style: pw.TextStyle(
                  fontSize: 16,
                  font: ttf, // Smaller font size for the footer
                  color: PdfColor.fromInt(0xFF000000), // Black color
                ),
              ),
            ],
          );
        },
      ),
    );

    final directory = '/storage/emulated/0/Download/speech_to_text.pdf';
    final file = File(directory);
    await file.writeAsBytes(await pdf.save());

    // Open the PDF file
    await OpenFile.open(file.path);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      floatingActionButton: AvatarGlow(
        endRadius: 75.0,
        animate: isListening,
        duration: Duration(milliseconds: 2000),
        glowColor: Colors.black,
        repeat: true,
        repeatPauseDuration: Duration(milliseconds: 100),
        showTwoGlows: true,
        child: FloatingActionButton(
          onPressed: () async {
            if (!isListening) {
              var available = await speechToText.initialize();
              if (available) {
                setState(() {
                  isListening = true;
                  speechToText.listen(
                    onResult: (result) {
                      setState(() {
                        text = result.recognizedWords;
                      });
                    },
                  );
                });
              }
            } else {
              speechToText.stop();
              setState(() {
                isListening = false;
              });
            }
          },
          backgroundColor: Colors.black,
          child: Icon(
            isListening ? Icons.stop : Icons.mic,
            color: Colors.white,
          ),
        ),
      ),
      appBar: AppBar(
        leading: Icon(
          Icons.sort_rounded,
          color: Colors.white,
        ),
        centerTitle: true,
        backgroundColor: Color.fromARGB(255, 10, 201, 185), // Change to your desired color
        elevation: 0.0,
        title: Text(
          "Speech to Text",
          style: TextStyle(
            fontWeight: FontWeight.w700,
            fontSize: 20,
            color: Colors.black, // Change to your desired color
          ),
        ),
      ),
      body: SingleChildScrollView(
        reverse: true,
        physics: BouncingScrollPhysics(),
        child: Container(
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height * 0.7,
          alignment: Alignment.center,
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
          margin: const EdgeInsets.only(bottom: 150),
          child: Text(
            text,
            style: TextStyle(
              fontSize: 24,
              color: Colors.black54,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
      ),
      // Buttons at the bottom
      persistentFooterButtons: [
        ElevatedButton(
          onPressed: () async {
            await generatePdf(text);
          },
          child: Text("Save note"),
        ),
        ElevatedButton(
          onPressed: () {
            Navigator.of(context).push(MaterialPageRoute(
              builder: (context) => BillingPage(),
            ));
          },
          style: ElevatedButton.styleFrom(
              foregroundColor: const Color.fromARGB(255, 0, 0, 0), backgroundColor: Color.fromARGB(255, 231, 218, 31)),
          child: Text("Premium"),
        ),
      ],
    );
  }
}





// Using ChatGpt API to generate and enhance text from speech recognition 

// import 'dart:io';
// import 'package:flutter/material.dart';
// import 'package:open_file_plus/open_file_plus.dart';
// import 'package:pdf/pdf.dart';
// import 'package:speech_to_text/speech_to_text.dart';
// import 'package:pdf/widgets.dart' as pw;
// import 'package:flutter/services.dart';
// import 'package:avatar_glow/avatar_glow.dart';
// import 'package:http/http.dart' as http;
// import 'dart:convert';

// class SpeechScreen extends StatefulWidget {
//   const SpeechScreen({Key? key}) : super(key: key);

//   @override
//   _SpeechScreenState createState() => _SpeechScreenState();
// }

// class _SpeechScreenState extends State<SpeechScreen> {
//   SpeechToText speechToText = SpeechToText();
//   var text = "Start Taking Notes";
//   var isListening = false;

//   Future<void> generatePdf(String text) async {
//     final pdf = pw.Document();

//     // Load the Roboto font
//     final fontData = ByteData.sublistView(
//         await rootBundle.load('assets/font/Roboto-Regular.ttf'));
//     final ttf = pw.Font.ttf(fontData.buffer.asByteData());

//     pdf.addPage(
//       pw.Page(
//         build: (pw.Context context) {
//           return pw.Column(
//             crossAxisAlignment: pw.CrossAxisAlignment.center,
//             children: [
//               pw.Row(
//                 mainAxisAlignment: pw.MainAxisAlignment.center,
//                 children: [
//                   pw.Text(
//                     "LazyNotes",
//                     style: pw.TextStyle(
//                       fontSize: 36,
//                       font: ttf, // Larger font size
//                       color: PdfColor.fromInt(0xFF00FF00), // Green color
//                     ),
//                   ),
//                 ],
//               ),
//               pw.SizedBox(height: 20), // Add spacing
//               pw.Center(
//                 child: pw.Text(
//                   text,
//                   style: pw.TextStyle(
//                     fontSize: 24,
//                     font: ttf, // Apply the Roboto font
//                   ),
//                 ),
//               ),
//               pw.SizedBox(height: 500), // Add more spacing
//               pw.Text(
//                 "Generated by LazyNotes",
//                 style: pw.TextStyle(
//                   fontSize: 16,
//                   font: ttf, // Smaller font size for the footer
//                   color: PdfColor.fromInt(0xFF000000), // Black color
//                 ),
//               ),
//             ],
//           );
//         },
//       ),
//     );

//     final directory = '/storage/emulated/0/Download/speech_to_text.pdf';
//     final file = File(directory);
//     await file.writeAsBytes(await pdf.save());

//     // Open the PDF file
//     await OpenFile.open(file.path);
//   }

//   Future<String> generateNotes(String prompt) async {
//     final apiKey = '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'; // Replace with your ChatGPT API key
//     final endpoint = 'https://api.openai.com/v1/engines/davinci/completions';

//     final response = await http.post(
//       Uri.parse(endpoint),
//       headers: {
//         'Authorization': 'Bearer $apiKey',
//         'Content-Type': 'application/json',
//       },
//       body: json.encode({
//         'prompt': prompt,
//         'max_tokens': 150, // Adjust based on desired note length
//       }),
//     );

//     if (response.statusCode == 200) {
//       final responseData = json.decode(response.body);
//       return responseData['choices'][0]['text'];
//     } else {
//       throw Exception('Failed to generate notes: ${response.body}');
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
//       floatingActionButton: AvatarGlow(
//         endRadius: 75.0,
//         animate: isListening,
//         duration: Duration(milliseconds: 2000),
//         glowColor: Colors.black,
//         repeat: true,
//         repeatPauseDuration: Duration(milliseconds: 100),
//         showTwoGlows: true,
//         child: FloatingActionButton(
//           onPressed: () async {
//             if (!isListening) {
//               var available = await speechToText.initialize();
//               if (available) {
//                 setState(() {
//                   isListening = true;
//                   speechToText.listen(
//                     onResult: (result) {
//                       setState(() {
//                         text = result.recognizedWords;
//                       });
//                     },
//                   );
//                 });
//               }
//             } else {
//               speechToText.stop();
//               setState(() {
//                 isListening = false;
//               });
//             }
//           },
//           backgroundColor: Colors.black,
//           child: Icon(
//             isListening ? Icons.stop : Icons.mic,
//             color: Colors.white,
//           ),
//         ),
//       ),
//       appBar: AppBar(
//         leading: Icon(
//           Icons.sort_rounded,
//           color: Colors.white,
//         ),
//         centerTitle: true,
//         backgroundColor: Colors.green, // Change to your desired color
//         elevation: 0.0,
//         title: Text(
//           "Speech to Text",
//           style: TextStyle(
//             fontWeight: FontWeight.w700,
//             fontSize: 20,
//             color: Colors.black, // Change to your desired color
//           ),
//         ),
//       ),
//       body: SingleChildScrollView(
//         reverse: true,
//         physics: BouncingScrollPhysics(),
//         child: Container(
//           width: MediaQuery.of(context).size.width,
//           height: MediaQuery.of(context).size.height * 0.7,
//           alignment: Alignment.center,
//           padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
//           margin: const EdgeInsets.only(bottom: 150),
//           child: Text(
//             text,
//             style: TextStyle(
//               fontSize: 24,
//               color: Colors.black54,
//               fontWeight: FontWeight.w600,
//             ),
//           ),
//         ),
//       ),
//       // Button to generate and download PDF
//       persistentFooterButtons: [
//         ElevatedButton(
//           onPressed: () async {
//             // Generate notes using ChatGPT API
//             final notes = await generateNotes(text);

//             // Update the text with the generated notes
//             setState(() {
//               text = notes;
//             });

//             // Generate PDF with the updated notes
//             await generatePdf(text);
//           },
//           child: Text("Generate & Download PDF"),
//         ),
//       ],
//     );
//   }
// }

// void main() {
//   runApp(MaterialApp(
//     home: SpeechScreen(),
//   ));
// }
